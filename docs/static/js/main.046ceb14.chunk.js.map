{"version":3,"sources":["Components/Navbar/Navbar.tsx","Components/ProfileCard/ProfileCard.tsx","Components/TrendsCard/TrendsCard.tsx","Components/FollowerRcmd/FollowerRcmd.tsx","Components/FooterCard/FooterCard.tsx","Components/TweetBox/TweetBox.tsx","Components/NewsStreamCard/NewsStreamCard.tsx","Components/GotoTop/GotoTop.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","Icon","name","link","size","color","onClick","window","scrollTo","top","behavior","Search","placeholder","showNoResults","Button","circular","Component","Object","defineProperty","value","faker","writable","configurable","enumerable","ProfileCard","Grid","assign","this","props","Row","columns","Column","width","Image","src","image","internet","avatar","bordered","userName","random","number","TrendsCard","textAlign","map","v","i","TrendsCard_TrendsColumn","key","TrendsColumn","_ref","_ref$keyword","keyword","word","_ref$tweetCount","tweetCount","concat","parseInt","toString","replace","FollowerRcmd","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","divided","FollowerRcmd_RcmdColumn","RcmdColumn","_this","state","_avatar","_nickname","_username","isWhite","isFollowed","e","_this2","setState","setTimeout","findName","unitDur","nickname","idname","console","log","curState","_this3","closeIt","_this4","_this$props","_this$state","ava","nkn","slice","idn","length","style","onMouseEnter","mouseEnterLink","basic","content","clickFollowBt","data","title","href","FooterCard","TweetBox","inputValLenPer","downCounter","inputText","persist","etar","target","valLen","textContent","childNodes","nodeName","toUpperCase","remove","Math","round","inputValLen","contentEditable","id","onInput","inputHandle","bind","es","percent","strokeColor","strokeWidth","strokeLinecap","trailColor","trailWidth","NewsStreamCard","sentences","lorem","sentenceImg","timestamp","replyCount","retweetCount","iloveitCount","replied","retweeted","ilovedit","_this$state2","_this$state3","tabIndex","GotoTop","isLoading","Loader","active","App","_Component","newsStreamCardQueue","inherits","createClass","IntersectionObserver","entries","forEach","entry","isIntersecting","push","uuidv1","observe","document","querySelector","Navbar_Navbar_Navbar","ProfileCard_ProfileCard_ProfileCard","TrendsCard_TrendsCard_TrendsCard","FollowerRcmd_FollowerRcmd_FollowerRcmd","FooterCard_FooterCard_FooterCard","TweetBox_TweetBox_TweetBox","NewsStreamCard_NewsStreamCard_NewsStreamCard","GotoTop_GotoTop_GotoTop","Example","customerId","type","productId","createProductId","avoidAccidentalEquivalence","useEquivalence","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8XAMqBA,2LAEb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAQL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAI,IAAGR,EAAAC,EAAAC,cAAA,uBAC1CF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,kBAAiBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,eAAeC,MAAI,IAAER,EAAAC,EAAAC,cAAA,6BAC1DF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAQL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,eAAeC,MAAI,IAAER,EAAAC,EAAAC,cAAA,8BAErDF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,UAAUE,KAAK,QAAQC,MAAM,OAAOF,MAAI,EAACG,QAAS,WAAMC,OAAOC,SAAS,CAACC,IAAI,EAAGC,SAAS,cACpGf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,YAAY,8CAAWC,eAAe,EAAOT,KAAK,SAC1DT,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,gBAAgBE,KAAK,QAChCT,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,UAAQ,EAACV,MAAM,SAASD,KAAK,QAArC,sCAbYY,2DCDpCC,OAAOC,eAAeX,OAAO,QAAQ,CACjCY,MAAOC,IACPC,UAAU,EACVC,cAAc,EACdC,YAAY,QAGKC,mLAEb,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAA,EAADR,OAAAS,OAAA,CAAM5B,UAAU,eAAkB6B,KAAKC,OAC1CjC,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAUC,QAAS,EAAGhC,UAAU,WAC5BH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,IAChBrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,IAAKd,IAAMe,MAAMA,YAGhCxC,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAU,cAChBH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAajC,UAAU,SAASkC,MAAO,GACnCrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,IAAKd,IAAMgB,SAASC,SAAUtB,UAAQ,EAACuB,UAAQ,KAE1D3C,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAajC,UAAU,YACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYsB,IAAMgB,SAASG,YAC1C5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,IAA+BsB,IAAMgB,SAASG,cAGtD5C,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAU,aAAagC,QAAQ,SACrCnC,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAajC,UAAU,aACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASsB,IAAMoB,OAAOC,WAEzC9C,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAajC,UAAU,iBACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,sBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASsB,IAAMoB,OAAOC,WAEzC9C,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAajC,UAAU,gBACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,sBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASsB,IAAMoB,OAAOC,oBA5BhBzB,aCJpB0B,4LAEb,OAAO/C,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,UAAU,cACnBH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIW,UAAU,OAAO7C,UAAU,aAC/CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,uDADJ,OAEIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAIL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,8BAGb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG8C,IAAI,SAACC,EAAEC,GAAH,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,CAAcC,IAAKF,cARxB9B,cAenCiC,EAAe,SAAAC,GAAiH,IAAAC,EAAAD,EAA/GE,eAA+G,IAAAD,EAArG/B,IAAMoB,OAAOa,OAAwFF,EAAAG,EAAAJ,EAAhFK,kBAAgF,IAAAD,EAAnElC,IAAMoB,OAAOC,SAAsDa,EAM7H,OAAQ3D,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIW,UAAU,OAAO7C,UAAU,aACvDH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,aAAAwD,OAAeJ,EAAf,cACJzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA2BsD,GACzBK,SAASF,EAAWG,aAAa,KAAO/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAgCyD,EAAWG,WAN/FA,WAAWC,QAAQ,wBAAyB,KAMP,mBCzBrCC,uBACjB,SAAAA,EAAYhC,GAAW,OAAAX,OAAA4C,EAAA,EAAA5C,CAAAU,KAAAiC,GAAA3C,OAAA6C,EAAA,EAAA7C,CAAAU,KAAAV,OAAA8C,EAAA,EAAA9C,CAAA2C,GAAAI,KAAArC,KACbC,0EAIN,OAAOjC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,UAAU,eAAgBmE,QAAQ,cAE3CtE,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIW,UAAU,OAAO7C,UAAU,aAC/CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,mCADJ,OAEIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAWL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,8BAFxB,OAGIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,WAAUL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,+BAEvBH,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACqE,EAAD,CAAYpE,UAAU,YAEtBH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAU,aAChBH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,kBAAkB6C,UAAU,QACzDhD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,eACLL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAGnDH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,kBAAkB6C,UAAU,QAC1DhD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,gBACLL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,2DACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,oEAIZH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAU,aAAa6C,UAAU,QACvChD,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,iBAC9BH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,6CAAT,sEAlCsBgB,cA+DpCmD,cACF,SAAAA,EAAYvC,GAAU,IAAAwC,EAAA,OAAAnD,OAAA4C,EAAA,EAAA5C,CAAAU,KAAAwC,IAClBC,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAU,KAAAV,OAAA8C,EAAA,EAAA9C,CAAAkD,GAAAH,KAAArC,KAAMC,KACDyC,MAAQ,CACTC,QAASlD,IAAMgB,SAASC,SACxBkC,UAAWnD,IAAMgB,SAASG,WAC1BiC,UAAWpD,IAAMgB,SAASG,WAC1BkC,SAAS,EACTC,YAAY,GAPEN,uEAUdO,GAAiB,IAAAC,EAAAjD,KAErBA,KAAKkD,SAAS,CACVJ,SAAQ,IAGZlE,OAAOuE,WAAW,WACdF,EAAKC,SAAS,CACVP,QAASlD,IAAMgB,SAASC,SACxBkC,UAAWnD,IAAMlB,KAAK6E,WACtBP,UAAWpD,IAAMgB,SAASG,cATlB,KAahBhC,OAAOuE,WAAW,WACdF,EAAKC,SAAS,CACVJ,SAAS,EACTC,YAAY,KAElBM,4CAGSL,EAAkBtC,EAAe4C,EAAiBC,GAC7DC,QAAQC,IAAI/C,EAAQ4C,EAAUC,yCAGpBP,EAAkBU,GAAiB,IAAAC,EAAA3D,KAC7CA,KAAKkD,SAAS,CAACH,YAAaW,IAC5B9E,OAAOuE,WAAW,WACdQ,EAAKC,QAAQZ,IACf,sCAIE,IAAAa,EAAA7D,KAAA8D,EACmC9D,KAAKC,MAAjCS,EADPoD,EACOpD,OAAQ4C,EADfQ,EACeR,SAAUC,EADzBO,EACyBP,OADzBQ,EAE4D/D,KAAK0C,MAA1DC,EAFPoB,EAEOpB,QAASC,EAFhBmB,EAEgBnB,UAAWC,EAF3BkB,EAE2BlB,UAAUC,EAFrCiB,EAEqCjB,QAASC,EAF9CgB,EAE8ChB,WAExCiB,EAAMtD,GAAUiC,EAChBsB,GAAOX,GAAYV,GAAWsB,MAAM,EAAE,IACxCC,GAAOZ,GAAUV,GAAWqB,MAAM,EAAE,GAAGD,EAAIG,OAAO,GAAGH,EAAIG,OAAO,EAAE,GAGtE,OAFMD,GAAOF,EAAIE,GAAKC,QAAQ,GAAKD,EAAI,MAAQA,EAExCnG,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAW,YAAc6B,KAAKC,MAAM9B,WAAW,KAAO2E,EAAU,cAAc,IAAKuB,MAAOrE,KAAKC,MAAMoE,OAC9GrG,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,UAC7BH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,OAAO4F,EAAKK,aAAc,SAACtB,GAAKa,EAAKU,eAAevB,EAAEgB,EAAIC,EAAIE,KACpEnG,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,IAAKyD,EAAK5E,UAAQ,EAACuB,UAAQ,EAAClC,KAAK,WAGhDT,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,aAAa6C,UAAU,QACrDhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,OAAO4F,EAAKK,aAAc,SAACtB,GAAKa,EAAKU,eAAevB,EAAEgB,EAAIC,EAAIE,KACpEnG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY8F,GAC5BjG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,IAA2BgG,IAE/BnG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQQ,QAAS,SAACqE,GAAMa,EAAKD,QAAQZ,KAArD,SAEJhF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQT,MAAM,SAASD,KAAK,OAAOW,UAAQ,EAACoF,OAAK,EACzCrG,UAAW,YAAY4E,EAAa,YAAc,IAAK0B,QAAS1B,EAAa,qBAAQ,qBACrFpE,QAAS,SAACqE,GAAMa,EAAKa,cAAc1B,EAAED,eAtE5C1D,aChErBsF,WAAO,CACP,CAACC,MAAM,2BAAQC,KAAK,UACpB,CAACD,MAAM,2BAAQC,KAAK,YACpB,CAACD,MAAM,2BAAQC,KAAK,QACpB,CAACD,MAAM,oDAAaC,KAAK,YACzB,CAACD,MAAM,eAAMC,KAAK,WAClB,CAACD,MAAM,4BAASC,KAAK,QACrB,CAACD,MAAM,qBAAOC,KAAK,WACnB,CAACD,MAAM,qBAAOC,KAAK,UACnB,CAACD,MAAM,kCAAUC,KAAK,iBACtB,CAACD,MAAM,uCAAUC,KAAK,aACtB,CAACD,MAAM,2BAAQC,KAAK,YACpB,CAACD,MAAM,qBAAOC,KAAK,cACnB,CAACD,MAAM,2BAAQC,KAAK,aACpB,CAACD,MAAM,qBAAOC,KAAK,gBAIFC,mLAEb,OAAO9G,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,UAAU,aAAa6C,UAAU,QAC1ChD,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,aAC9BH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,+BAEIyG,EAAK1D,IAAI,SAACC,EAAEC,GACR,OAAOnD,EAAAC,EAAAC,cAAA,MAAImD,IAAKF,GAAGnD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI6C,EAAE2D,MAAO3D,EAAE0D,YAKxD5G,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,cAC1BH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,6CACLL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,oBADf,oEAdoBc,gCCHnB0F,cACjB,SAAAA,EAAY9E,GAAW,IAAAwC,EAAA,OAAAnD,OAAA4C,EAAA,EAAA5C,CAAAU,KAAA+E,IACnBtC,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAU,KAAAV,OAAA8C,EAAA,EAAA9C,CAAAyF,GAAA1C,KAAArC,KAAMC,KAEDyC,MAAQ,CACThC,OAAQjB,IAAMgB,SAASC,SACvBsE,eAAgB,EAChBC,aAAc,IACdC,UAAU,IAPKzC,2EAWXO,GACJA,EAAEmC,UACF,IAEIC,EAASpC,EAAEqC,OACXC,EAASF,EAAKG,YAAcH,EAAKG,YAAYnB,OAAS,GAE9C,IAATkB,GAAeF,EAAKI,WAAW,IAAkD,OAA5CJ,EAAKI,WAAW,GAAGC,SAASC,gBAChEN,EAAKI,WAAW,GAAGG,SAGvB3F,KAAKkD,SAAS,CACV8B,eAAgBY,KAAKC,MAAMP,EAVhB,IAU8B,KACzCQ,YAAaR,EACbL,YAAaK,EAZF,uCAgBf,IAAAvB,EACgD/D,KAAK0C,MAApDhC,EADDqD,EACCrD,OAAOsE,EADRjB,EACQiB,eAAeC,EADvBlB,EACuBkB,YADvBlB,EACmCmB,UACvC,OAAOlH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAU,YACvBH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,UAC7BH,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,IAAKG,EAAQtB,UAAQ,EAACuB,UAAQ,EAAClC,KAAK,UAE/CT,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,GAAIlC,UAAU,YAC9BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAK6H,iBAAiB,EAAM5H,UAAU,eAAe6H,GAAG,SAAS/G,YAAY,yEACzEgH,QAASjG,KAAKkG,YAAYC,KAAKnG,QAEnChC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,gBAAiBJ,UAAU,UACtCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW8G,IAAc,IAAIA,EAAY,IACxDjH,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAQjI,UAAU,aAAakI,QAASrB,EACpCsB,YAAatB,EAAe,IAAI,UAA4B,MAAjBA,EAAqB,UAAU,UAC1EuB,YAAY,KAAMC,cAAc,SAASC,WAAW,UAAUC,WAAW,MAE7E1I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,UAAUJ,UAAU,QAAQO,MAAM,SAASD,KAAK,SACvDT,EAAAC,EAAAC,cAAA,sFAEJF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,SAASJ,UAAU,MAAMO,MAAM,SAASD,KAAK,SACpDT,EAAAC,EAAAC,cAAA,0DAEJF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,SAASJ,UAAU,OAAOO,MAAM,SAASD,KAAK,SACrDT,EAAAC,EAAAC,cAAA,sDAEJF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,uBAAuBJ,UAAU,MAAMO,MAAM,SAASD,KAAK,SAClET,EAAAC,EAAAC,cAAA,mEAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,MAAMJ,UAAU,SAASO,MAAM,SAASD,KAAK,QAAQW,UAAQ,GACpEpB,EAAAC,EAAAC,cAAA,mEAEJF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,UAAQ,EAACV,MAAM,SAASD,KAAK,OAAON,UAAU,WAAtD,wCAlEUkB,aCMjBsH,uBACjB,SAAAA,EAAY1G,GAAU,IAAAwC,EAAA,OAAAnD,OAAA4C,EAAA,EAAA5C,CAAAU,KAAA2G,IAClBlE,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAU,KAAAV,OAAA8C,EAAA,EAAA9C,CAAAqH,GAAAtE,KAAArC,KAAMC,KACDyC,MAAQ,CACThC,OAAQjB,IAAMgB,SAASC,SACvB6C,OAAQ9D,IAAMlB,KAAK6E,WACnBE,SAAU7D,IAAMgB,SAASG,WACzBgG,UAAWnH,IAAMoH,MAAMD,YACvBE,YAAarH,IAAMoB,OAAOL,QAC1BuG,UAAWtH,IAAMoB,OAAOC,SACxBkG,WAAYpB,KAAKC,MAAMpG,IAAMoB,OAAOC,SAAS,KAC7CmG,aAAcrB,KAAKC,MAAMpG,IAAMoB,OAAOC,SAAS,KAC/CoG,aAActB,KAAKC,MAAMpG,IAAMoB,OAAOC,SAAS,KAE/CqG,SAAS,EACTC,WAAW,EACXC,UAAU,GAfI5E,wEAkBd,IAAAQ,EAAAjD,KAAA+D,EAC6D/D,KAAK0C,MAAhEhC,EADFqD,EACErD,OAAO4C,EADTS,EACST,SAASC,EADlBQ,EACkBR,OAAOqD,EADzB7C,EACyB6C,UAAUE,EADnC/C,EACmC+C,YAAYC,EAD/ChD,EAC+CgD,UAD/CO,EAE6CtH,KAAK0C,MAAhDsE,EAFFM,EAEEN,WAAYC,EAFdK,EAEcL,aAAcC,EAF5BI,EAE4BJ,aAF5BK,EAGmCvH,KAAK0C,MAAtCyE,EAHFI,EAGEJ,QAASC,EAHXG,EAGWH,UAAWC,EAHtBE,EAGsBF,SAE1B,OAAOrJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAClBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACZH,EAAAC,EAAAC,cAAA,OAAKqC,IAAKG,KAEd1C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYmF,GAC5BtF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,IAA2BoF,GAC3BvF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,SAA8B4I,EAA9B,QACA/I,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,sBAAuBqJ,SAAS,MAC5CxJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACZH,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,0FACAF,EAAAC,EAAAC,cAAA,0EAIZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVyI,GAEL5I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,yCAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKqC,IAAKuG,KAEd9I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,SAAWgJ,EAAQ,WAAW,IAAMxI,QAAS,YACzDwI,GAAYlE,EAAKC,SAAS,CAAC8D,WAAYA,EAAa,EAAGG,SAAUA,IAClEA,GAAWlE,EAAKC,SAAS,CAAC8D,WAAYA,EAAa,EAAGG,SAAUA,MAEhEnJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,mBACPP,EAAAC,EAAAC,cAAA,yCAEJF,EAAAC,EAAAC,cAAA,YAAO8I,IAEXhJ,EAAAC,EAAAC,cAAA,QAAMC,UAAW,WAAciJ,EAAU,aAAa,IAAKzI,QAAS,YAC/DyI,GAAcnE,EAAKC,SAAS,CAAC+D,aAAcA,EAAe,EAAGG,WAAYA,IAC1EA,GAAanE,EAAKC,SAAS,CAAC+D,aAAcA,EAAc,EAAGG,WAAYA,MAEvEpJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,WACPP,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,YAAO+I,IAEXjJ,EAAAC,EAAAC,cAAA,QAAMC,UAAW,WAAakJ,EAAS,YAAY,IAAK1I,QACpD,YACK0I,GAAapE,EAAKC,SAAS,CAACgE,aAAcA,EAAe,EAAGG,UAAWA,IACxEA,GAAYpE,EAAKC,SAAS,CAACgE,aAAcA,EAAe,EAAGG,UAAWA,MAG1ErJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,iBACPP,EAAAC,EAAAC,cAAA,sDAEJF,EAAAC,EAAAC,cAAA,YAAOgJ,IAEXlJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,gBACPP,EAAAC,EAAAC,cAAA,wCAtFgBmB,wBCdvBoI,4LAET,IAAA3D,EACwB9D,KAAKC,MAA5ByH,EADD5D,EACC4D,UAAUvJ,EADX2F,EACW3F,UACf,OAAOH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKI,IAAN,CAAU/B,UAAW,YAAcA,GAAW,KAC7CH,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAQC,SAAUF,EAAWjJ,KAAM,WACnCT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAAauJ,EAAU,QAAQ,IAAK/I,QAAS,WACzDC,OAAOC,SAAS,CAACC,IAAI,EAAGC,SAAS,aAEjCf,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,UAAUG,MAAM,QAAQD,KAAK,QAAQN,UAAU,aAC1DH,EAAAC,EAAAC,cAAA,wDAViBmB,gCCaxBwI,EAAb,SAAAC,GACI,SAAAD,EAAY5H,GAAa,IAAAwC,EAAA,OAAAnD,OAAA4C,EAAA,EAAA5C,CAAAU,KAAA6H,IACnBpF,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAU,KAAAV,OAAA8C,EAAA,EAAA9C,CAAAuI,GAAAxF,KAAArC,KAAMC,KACDyC,MAAO,CACRqF,oBAAoB,CAAC,IAAI,IAAI,IAAI,KACjCL,WAAW,GAEflE,QAAQC,IAAI,wBACZD,QAAQC,IAAI,oCAPOhB,EAD7B,OAAAnD,OAAA0I,EAAA,EAAA1I,CAAAuI,EAAAC,GAAAxI,OAAA2I,EAAA,EAAA3I,CAAAuI,EAAA,EAAAxG,IAAA,oBAAA7B,MAAA,WAWuB,IAAAyD,EAAAjD,KACV+H,EAAuB/H,KAAK0C,MAA5BqF,oBAEU,IAAIG,qBAAqB,SAACC,GACrCA,EAAQC,QAAQ,SAACC,GACVA,EAAMC,iBACLrF,EAAKC,SAAS,CAACwE,WAAW,IAC1BvE,WAAW,WACP4E,EAAoBQ,KAAKC,OACzBT,EAAoBQ,KAAKC,OACzBT,EAAoBQ,KAAKC,OACzBT,EAAoBQ,KAAKC,OACzBvF,EAAKC,SAAS,CAAC6E,sBAAqBL,WAAW,KACjD,UAMLe,QAAQC,SAASC,cAAc,iBA9BhD,CAAAtH,IAAA,SAAA7B,MAAA,WAiCY,IAAAuE,EACqC/D,KAAK0C,MAAvCqF,EADHhE,EACGgE,oBAAqBL,EADxB3D,EACwB2D,UAC1B,OACE1J,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC0K,EAAD,MACA5K,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,UAAU,iBACZH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,iBAC7BH,EAAAC,EAAAC,cAAC2K,EAAD,MACA7K,EAAAC,EAAAC,cAAC4K,EAAD,MACA9K,EAAAC,EAAAC,cAAC6K,EAAD,MACA/K,EAAAC,EAAAC,cAAC8K,EAAD,OAGJhL,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,oBAC7BH,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,UAAU,sBACZH,EAAAC,EAAAC,cAAC+K,EAAD,MAEElB,EAAoB9G,IAAI,SAACC,EAAEC,GACvB,OAAOnD,EAAAC,EAAAC,cAACgL,EAAD,CAAgB7H,IAAKH,MAGlClD,EAAAC,EAAAC,cAACiL,EAAD,CAASzB,UAAWA,EAAWvJ,UAAU,gBAIjDH,EAAAC,EAAAC,cAAC4B,EAAA,EAAKM,OAAN,CAAaC,MAAO,EAAGlC,UAAU,kBAC7BH,EAAAC,EAAAC,cAAC6K,EAAD,MACA/K,EAAAC,EAAAC,cAAC8K,EAAD,cA7D1BnB,EAAA,CAAyBxI,aAuFnB+J,0HACgCpD,2CAIZA,aAKtBqD,EAjBqD,CAAEC,KAAM,aAAc9J,MAiB7C,GAC9B+J,EAdoB,SAAC/J,GAAD,MAA+B,CAAE8J,KAAM,YAAa9J,SAc5DgK,CAAgB,GAGhCJ,EAAQK,2BAA2BJ,GAMnCD,EAAQM,eAAeL,EAAW7J,OAGlC4J,EAAQM,eAAeH,EAAU/J,OAIjCgE,QAAQC,IADM,UAGCoE,QClIK8B,QACW,cAA7B/K,OAAOgL,SAASC,UAEe,UAA7BjL,OAAOgL,SAASC,UAEhBjL,OAAOgL,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOhM,EAAAC,EAAAC,cAAC+L,EAAD,MAASvB,SAASwB,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.046ceb14.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Grid,Icon,Button,Search ,Segment, Container} from 'semantic-ui-react';\r\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport './Navbar.scss';\r\n\r\n\r\nexport default class Navbar extends Component{\r\n    render(){\r\n        return <div className='Navbar'>\r\n                <div className='NavbarWrapper'>\r\n                    <div className='leftPart'>\r\n                        <Link to='/home'><Icon name='home' link /><span>홈</span></Link>\r\n                        <Link to='/notifications'><Icon name='bell outline' link/><span>알림</span></Link>\r\n                        <Link to='/mail'><Icon name='mail outline' link/><span>쪽지</span></Link>\r\n                    </div>\r\n                    <Icon name='twitter' size='large' color='blue' link onClick={()=>{ window.scrollTo({top:0, behavior:'smooth'}); }}></Icon>\r\n                    <div className='rightPart'>\r\n                        <Search placeholder='트위터 검색하기' showNoResults={false} size='mini'/>\r\n                        <Icon name='smile outline' size='big'/>\r\n                        <Button circular color='yellow' size='tiny'>트윗하기</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    }\r\n}\r\n","import React,{Component} from 'react';\r\nimport {Grid,Image} from 'semantic-ui-react';\r\nimport './ProfileCard.scss';\r\nimport faker from 'faker';\r\n\r\nObject.defineProperty(window,'faker',{\r\n    value: faker,\r\n    writable: true,\r\n    configurable: true,\r\n    enumerable: true\r\n})\r\n\r\nexport default class ProfileCard extends Component{\r\n    render(){\r\n        return <Grid className='profileCard' {...this.props}>\r\n            <Grid.Row columns={1} className='topPart'>\r\n                <Grid.Column width={16}>\r\n                    <Image src={faker.image.image()} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row className='middlePart'>\r\n                <Grid.Column className='avatar' width={5}>\r\n                    <Image src={faker.internet.avatar()} circular bordered/>\r\n                </Grid.Column>\r\n                <Grid.Column className='userinfo'>\r\n                    <div className='nickname'>{faker.internet.userName()}</div>\r\n                    <div className='contactName'>@{faker.internet.userName()}</div>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row className='bottomPart' columns='equal'>\r\n                <Grid.Column className='tweetArea' >\r\n                    <div className='tweet'>트윗</div>\r\n                    <div className='count'>{faker.random.number()}</div>\r\n                </Grid.Column>\r\n                <Grid.Column className='followingArea'>\r\n                    <div className='following'>팔로잉</div>\r\n                    <div className='count'>{faker.random.number()}</div>\r\n                </Grid.Column>\r\n                <Grid.Column className='followerArea'>\r\n                    <div className='follower'>팔로워</div>\r\n                    <div className='count'>{faker.random.number()}</div>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Grid} from 'semantic-ui-react';\r\nimport './TrendsCard.scss';\r\nimport faker from 'faker';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default class TrendsCard extends Component{\r\n    render(){\r\n        return <Grid className='TrendsCard'>\r\n            <Grid.Column width={16} textAlign=\"left\" className='titleArea'>\r\n                <span className='title'>전 세계 지역 트렌드</span>·\r\n                <Link to='#'><span className='fixinfo'>변경하기</span></Link>\r\n            </Grid.Column>\r\n            {\r\n                [1,2,3,4,5,6,7,8].map((v,i)=><TrendsColumn key={i} />)\r\n            }\r\n        </Grid>\r\n    }\r\n}\r\n\r\n\r\n let TrendsColumn = ({keyword = faker.random.word(), tweetCount = faker.random.number()}: {keyword?:string,tweetCount?:number}):any=>{\r\n \r\n        let numberWithCommas = (x:string):string => {\r\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        }\r\n\r\n        return (<Grid.Column width={16} textAlign=\"left\" className='trendsCol'>\r\n            <Link to={`/search?q=${keyword}&src=tren`}>\r\n                <div className='keyword'>#{keyword}</div>\r\n                { parseInt(tweetCount.toString())>=100 && <div className='tweetCount' >{numberWithCommas(tweetCount.toString())}트윗</div> }\r\n            </Link>\r\n        </Grid.Column>);\r\n    \r\n};\r\n\r\n","import React,{Component, SyntheticEvent} from 'react';\r\nimport {Grid,Image, Button} from 'semantic-ui-react';\r\nimport './FollowerRcmd.scss';\r\nimport faker from 'faker';\r\nimport {Link} from 'react-router-dom';\r\n//import sprite from \"./web_sprite.png\";\r\n\r\nexport default class FollowerRcmd extends Component{\r\n    constructor(props:any){\r\n        super(props);\r\n\r\n    }\r\n    render(){\r\n        return <Grid className='FollowerRcmd'  divided='vertically'>\r\n\r\n            <Grid.Column width={16} textAlign=\"left\" className='titleArea'>\r\n                <span className='rcmd'>팔로우 추천</span>· \r\n                <Link to='/refresh'><span className='refresh'>새로 고침</span></Link>· \r\n                <Link to='/seeall'><span className='seeall'>모두 보기</span></Link>\r\n            </Grid.Column>\r\n            <RcmdColumn />\r\n            <RcmdColumn />\r\n            <RcmdColumn />\r\n            <RcmdColumn />\r\n            <RcmdColumn className='lastCol'/>\r\n\r\n            <Grid.Row className='firstPart'>\r\n                <Grid.Column width={3} className='firstPartColImg' textAlign='left'>\r\n                    <Link to=\"/signInMail\" >\r\n                        <div className='imgWrapper'><div className='imageMail'></div></div>\r\n                    </Link>\r\n                </Grid.Column>\r\n                <Grid.Column width={13} className='firstPartColTxt' textAlign='left'>\r\n                    <Link to=\"./signInMail\" >\r\n                        <div className='title'>지인들을 찾아보세요</div>\r\n                        <div className='littletitle'>Gmail에서 연락처 가져오기</div>\r\n                    </Link>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row className='secondPart' textAlign='left'>\r\n                <Grid.Column width={16} className='secondPartCol'>\r\n                    <Link to=\"/welcome?ref=gl-tw-tw-twitter-webtimeline\" >\r\n                        다른 주소록 연결하기\r\n                    </Link>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n               \r\n        </Grid>\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IRcmdColState{\r\n    _avatar:string, \r\n    _nickname:string,\r\n    _username:string,\r\n    isWhite:boolean, \r\n    isFollowed:boolean\r\n}\r\n\r\ninterface IRcmdColProps{\r\n    avatar?: string,\r\n    nickname?: string,\r\n    idname?: string,\r\n    className?: string,\r\n    style?: string\r\n}\r\n\r\n\r\nclass RcmdColumn extends Component<IRcmdColProps,IRcmdColState>{\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            _avatar: faker.internet.avatar(),\r\n            _nickname: faker.internet.userName(),\r\n            _username: faker.internet.userName(),\r\n            isWhite: false,\r\n            isFollowed: false\r\n        }\r\n    }\r\n    closeIt(e:SyntheticEvent){\r\n        const unitDur = 300;\r\n        this.setState({            \r\n            isWhite:true\r\n        });\r\n\r\n        window.setTimeout(()=>{\r\n            this.setState({\r\n                _avatar: faker.internet.avatar(),\r\n                _nickname: faker.name.findName(),\r\n                _username: faker.internet.userName(),\r\n            });\r\n        },unitDur)\r\n\r\n        window.setTimeout(()=>{\r\n            this.setState({\r\n                isWhite: false,\r\n                isFollowed: false\r\n            });\r\n        },unitDur*2);\r\n    }\r\n\r\n    mouseEnterLink(e:SyntheticEvent, avatar:string, nickname:string, idname:string){\r\n        console.log(avatar, nickname, idname);\r\n    }\r\n\r\n    clickFollowBt(e:SyntheticEvent, curState:boolean){\r\n        this.setState({isFollowed: !curState});\r\n        window.setTimeout(()=>{\r\n            this.closeIt(e);\r\n        },1000)\r\n        \r\n    }\r\n\r\n    render(){\r\n            const {avatar, nickname, idname} = this.props;\r\n            const {_avatar, _nickname, _username,isWhite, isFollowed} = this.state;\r\n\r\n            const ava = avatar || _avatar;\r\n            const nkn = (nickname || _nickname).slice(0,10);\r\n            let idn = (idname || _username).slice(0,10>nkn.length?10-nkn.length+4:4);\r\n                  idn = (nkn+idn).length>=14 ? idn+'...' : idn;            \r\n\r\n            return <Grid.Row className={'rcmdCol ' + (this.props.className||'') + (isWhite ? ' whiteBoard':'')} style={this.props.style}>\r\n                    <Grid.Column width={4} className='avatar'>\r\n                        <Link to={'/id/'+nkn} onMouseEnter={(e)=>{this.mouseEnterLink(e,ava,nkn,idn)}}>\r\n                            <Image src={ava} circular bordered size='tiny'/>\r\n                        </Link>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12} className='avatarInfo' textAlign='left'>    \r\n                        <div className='nameArea'>\r\n                            <Link to={'/id/'+nkn} onMouseEnter={(e)=>{this.mouseEnterLink(e,ava,nkn,idn)}}>\r\n                                <span className='nickname'>{nkn}</span>\r\n                                <span className='idname'>@{idn}</span>\r\n                            </Link>\r\n                            <span className='close' onClick={(e)=>{ this.closeIt(e)}}>×</span>\r\n                        </div>\r\n                        <Button color='yellow' size='mini' circular basic \r\n                                className={'followBt'+(isFollowed ? ' followed' : '')} content={isFollowed ? '팔로잉' : '팔로우'}\r\n                                onClick={(e)=>{ this.clickFollowBt(e,isFollowed) }} \r\n                                />\r\n                    </Grid.Column>\r\n            </Grid.Row>\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Grid, Image, Button , Icon} from 'semantic-ui-react';\r\nimport './FooterCard.scss';\r\nimport faker from 'faker';\r\nimport {Link} from 'react-router-dom';\r\n\r\nlet data = [\r\n    {title:'회사소개', href:'/about'},\r\n    {title:'고객센터', href:'/support'},\r\n    {title:'이용약관', href:'/tos'},\r\n    {title:'개인정보 처리방침', href:'/privacy'},\r\n    {title:'쿠키', href:'/cookie'},\r\n    {title:'광고 정보', href:'/ads'},\r\n    {title:'브랜드', href:'/brands'},\r\n    {title:'블로그', href:'/korea'},\r\n    {title:'시스템 현황', href:'/systemstatus'},\r\n    {title:'애플리케이션', href:'/products'},\r\n    {title:'인재채용', href:'/careers'},\r\n    {title:'마케팅', href:'/marketing'},\r\n    {title:'비즈니스', href:'/business'},\r\n    {title:'개발자', href:'/developer'}\r\n]\r\n\r\n\r\nexport default class FooterCard extends Component{\r\n    render(){\r\n        return <Grid className='FooterCard' textAlign='left' >\r\n            <Grid.Column width={16} className='firstPart'>\r\n                <ul>\r\n                    <li>© 2019 Twitter</li>\r\n                    {\r\n                        data.map((v,i)=>{\r\n                            return <li key={i}><Link to={v.href}>{v.title}</Link></li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Grid.Column>\r\n            <Grid.Column width={16} className='secondPart'>\r\n                    <Link to='/welcome?ref=gl-tw-tw-twitter-webtimeline'>\r\n                        <Icon name='external square' />트위터로 광고하세요\r\n                    </Link>\r\n            </Grid.Column>\r\n        </Grid>\r\n    }\r\n}\r\n\r\n","import React, { Component, SyntheticEvent } from 'react';\r\nimport { Grid, Image, Button, Icon } from 'semantic-ui-react';\r\nimport './TweetBox.scss';\r\nimport faker from 'faker';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Line, Circle } from 'rc-progress';\r\n\r\n\r\ninterface IProps{\r\n\r\n}\r\n\r\ninterface IState{\r\n    avatar: string,\r\n    inputValLenPer: number,\r\n    downCounter: number,\r\n    inputText: string,\r\n    inputValLen?: number\r\n}\r\n\r\nexport default class TweetBox extends Component<IProps,IState>{\r\n    constructor(props: any){\r\n        super(props);\r\n\r\n        this.state = {\r\n            avatar: faker.internet.avatar(),\r\n            inputValLenPer: 0,\r\n            downCounter: -999,\r\n            inputText:''\r\n        }\r\n    }\r\n\r\n    inputHandle(e: SyntheticEvent){\r\n            e.persist();\r\n            const maxLen = 260;\r\n            \r\n            let etar =  (e.target as HTMLDivElement);\r\n            let valLen = etar.textContent ? etar.textContent.length : 0;\r\n            \r\n            if(valLen===0 || (etar.childNodes[0] && etar.childNodes[0].nodeName.toUpperCase()==='BR')){\r\n                etar.childNodes[0].remove();\r\n            }\r\n\r\n            this.setState({ \r\n                inputValLenPer: Math.round(valLen/maxLen*100),\r\n                inputValLen: valLen,\r\n                downCounter: valLen - maxLen \r\n            });\r\n    }\r\n\r\n    render(){\r\n        let {avatar,inputValLenPer,downCounter,inputText} = this.state;\r\n        return <Grid.Row className='tweetBox'>\r\n            <Grid.Column width={2} className='avatar'>\r\n                <Image src={avatar} circular bordered size='mini'/>\r\n            </Grid.Column>\r\n            <Grid.Column width={14} className='inputBox'>\r\n                <div className='inputBoxWrapper'>\r\n                    <div contentEditable={true} className='inputBoxCore' id='greenX' placeholder='무슨 일이 일어나고 있나요?' \r\n                        onInput={this.inputHandle.bind(this)} \r\n                    />\r\n                    <Icon name='smile outline'  className='faces' />\r\n                    <div className='counter'>{downCounter>=-10?-downCounter:''}</div>\r\n                    <Circle className='progCircle' percent={inputValLenPer} \r\n                        strokeColor={inputValLenPer<100?\"#2AA6F2\":(inputValLenPer===100?\"#FFAD1F\":\"#E0245E\")} \r\n                        strokeWidth=\"12\"  strokeLinecap=\"square\" trailColor='#DBE2E7' trailWidth='5'\r\n                    />\r\n                    <div className='toolbar'>\r\n                        <div className='leftPart'>\r\n                            <Icon name='picture' className='photo' color='yellow' size='large' >\r\n                                <span>사진 또는 동영상 추가하기</span>\r\n                            </Icon>\r\n                            <Icon name='trello' className='gif' color='yellow' size='large'>\r\n                                <span>GIF 파일 추가하기</span>\r\n                            </Icon>\r\n                            <Icon name='sheqel' className='poll' color='yellow' size='large'>\r\n                                <span>투표 추가하기</span>\r\n                            </Icon>\r\n                            <Icon name='map marker alternate' className='gps' color='yellow' size='large'>\r\n                                <span>위치정보 사용안함</span>\r\n                            </Icon>\r\n                        </div>\r\n                        <div className='rightPart'>\r\n                            <Icon name='add' className='plusbt' color='yellow' size='large' circular>\r\n                                <span>다른 트윗 추가하기</span>\r\n                            </Icon>\r\n                            <Button circular color='yellow' size='tiny' className='dotweet'>트윗하기</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Grid.Column>\r\n        </Grid.Row>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Grid, Image, Button, Icon } from 'semantic-ui-react';\r\nimport './NewsStreamCard.scss';\r\nimport faker from 'faker';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface IProps{\r\n\r\n}\r\ninterface IState{\r\n    avatar: string,\r\n    idname: string,\r\n    nickname: string,\r\n    sentences: string,\r\n    sentenceImg: string,\r\n    timestamp: number,\r\n    replyCount:number,\r\n    retweetCount: number,\r\n    iloveitCount: number,\r\n\r\n    replied: boolean,\r\n    retweeted: boolean,\r\n    ilovedit: boolean\r\n}\r\n\r\n\r\nexport default class NewsStreamCard extends Component<IProps, IState>{\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            avatar: faker.internet.avatar(),\r\n            idname: faker.name.findName(),\r\n            nickname: faker.internet.userName(),\r\n            sentences: faker.lorem.sentences(),\r\n            sentenceImg: faker.random.image(),\r\n            timestamp: faker.random.number(),\r\n            replyCount: Math.round(faker.random.number()/100),\r\n            retweetCount: Math.round(faker.random.number()/100),\r\n            iloveitCount: Math.round(faker.random.number()/100),\r\n\r\n            replied: false,\r\n            retweeted: false,\r\n            ilovedit: false\r\n        }\r\n    }\r\n    render(){\r\n        let { avatar,nickname,idname,sentences,sentenceImg,timestamp } = this.state;\r\n        let { replyCount, retweetCount, iloveitCount } = this.state;\r\n        let { replied, retweeted, ilovedit } = this.state;\r\n        //console.log(sentenceImg);\r\n        return <div className='newsStreamCard'>\r\n            <span className='avatar'>\r\n                <img src={avatar}/>\r\n            </span>\r\n            <span className='newsContent'>\r\n                <div className='title'>\r\n                    <span className='nickname'>{nickname}</span>\r\n                    <span className='idname'>@{idname}</span>\r\n                    <span className='timestamp'>・{timestamp}min </span>\r\n                    <Icon className='chevron down dropBt'  tabIndex=\"-1\">\r\n                        <span className='dropMenu'>\r\n                            <div>트윗 링크 복사하기</div>\r\n                            <div>트윗 담아가기</div>\r\n                            <div>@yonhaptweet 님 뮤트하기</div>\r\n                            <div>@yonhaptweet 님 차단하기</div>\r\n                            <div>트윗 신고하기</div>\r\n                            <div>트윗이 마음에 들지 않습니다</div>\r\n                            <div>새 모멘트에 추가하기</div>\r\n                        </span>\r\n                    </Icon>\r\n                </div>\r\n                <div className='textContent' >\r\n                    {sentences}\r\n                </div>\r\n                <div className='translateit'>\r\n                    트윗 번역하기\r\n                </div>\r\n                <div className='freeStyleContent'>\r\n                    <img src={sentenceImg}/>\r\n                </div>\r\n                <div className='actionList'>\r\n                    <span className={'reply' + (replied?' replied':'') } onClick={()=>{\r\n                        !replied &&  this.setState({replyCount: replyCount + 1, replied: !replied});\r\n                        replied && this.setState({replyCount: replyCount - 1, replied: !replied});\r\n                    }}>\r\n                        <Icon name='comment outline'>\r\n                            <span>답글하기</span>\r\n                        </Icon>\r\n                        <span>{replyCount}</span>\r\n                    </span>\r\n                    <span className={'retweet' +  (retweeted?' retweeted':'')} onClick={()=>{ \r\n                        !retweeted &&  this.setState({retweetCount: retweetCount + 1, retweeted: !retweeted});\r\n                        retweeted && this.setState({retweetCount: retweetCount- 1, retweeted: !retweeted});\r\n                    }}>\r\n                        <Icon name='retweet'>\r\n                            <span>리트윗</span>\r\n                        </Icon>\r\n                        <span>{retweetCount}</span>\r\n                    </span>\r\n                    <span className={'iloveit' + (ilovedit?' ilovedit':'')} onClick={\r\n                        ()=>{\r\n                            !ilovedit &&  this.setState({iloveitCount: iloveitCount + 1, ilovedit: !ilovedit});\r\n                            ilovedit && this.setState({iloveitCount: iloveitCount - 1, ilovedit: !ilovedit});\r\n                        }\r\n                    }>\r\n                        <Icon name='heart outline'>\r\n                            <span>마음에 들어요</span>\r\n                        </Icon>\r\n                        <span>{iloveitCount}</span>\r\n                    </span>\r\n                    <span className='sendmsg'>\r\n                        <Icon name='mail outline'>\r\n                            <span>쪽지</span>\r\n                        </Icon>\r\n                    </span>\r\n                </div>\r\n            </span>\r\n        </div>\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Grid,Loader,Icon} from 'semantic-ui-react';\r\nimport \"./GotoTop.scss\";\r\n\r\ninterface IState{\r\n\r\n}\r\ninterface IProps{\r\n    isLoading: boolean,\r\n    className: string\r\n}\r\n\r\n\r\nexport default class GotoTop extends Component <IProps, IState>{\r\n\r\n    render(){\r\n        let {isLoading,className} = this.props;\r\n        return <Grid.Row className={'gototop ' + (className||'')}   >\r\n                <Loader active={!!isLoading} size={'medium'}/>\r\n                <div className={'message' + (isLoading?' hide':'')} onClick={()=>{\r\n                    window.scrollTo({top:0, behavior:'smooth'} );\r\n                }}>\r\n                    <Icon name='twitter' color='black' size='large' className='birdIcon'/>\r\n                    <div>위로 가기 ↑</div>\r\n                </div>\r\n        </Grid.Row>\r\n    }\r\n}\r\n","import React,{Component} from 'react';\r\n\r\nimport './App.scss';\r\n\r\nimport Navbar from './Components/Navbar/Navbar';\r\nimport {BrowserRouter as Router, Link} from 'react-router-dom';\r\nimport {Grid} from 'semantic-ui-react';\r\n\r\nimport ProfileCard from './Components/ProfileCard/ProfileCard';\r\nimport TrendsCard from './Components/TrendsCard/TrendsCard';\r\nimport FollowerRcmd from './Components/FollowerRcmd/FollowerRcmd';\r\nimport FooterCard from './Components/FooterCard/FooterCard';\r\nimport TweetBox from './Components/TweetBox/TweetBox';\r\nimport NewsStreamCard from './Components/NewsStreamCard/NewsStreamCard';\r\nimport GotoTop from './Components/GotoTop/GotoTop';\r\n\r\nimport uuidv1 from 'uuid/v1';\r\n\r\ninterface IState {\r\n    newsStreamCardQueue: Array<string>,\r\n    isLoading: boolean\r\n}\r\ninterface IProps{\r\n\r\n}\r\n\r\nexport class App extends Component <IProps,IState> {\r\n    constructor(props:IProps){\r\n          super(props);\r\n          this.state= {\r\n              newsStreamCardQueue:['0','1','2','3'],\r\n              isLoading: false\r\n          }\r\n          console.log('Twitter-Faker V1.0.0');\r\n          console.log('Coded by kska32@gmail.com - 2019');\r\n    }\r\n\r\n    componentDidMount(){\r\n        let {newsStreamCardQueue} = this.state;\r\n\r\n        let observer = new IntersectionObserver((entries)=>{\r\n            entries.forEach((entry)=>{\r\n                if(entry.isIntersecting) {\r\n                    this.setState({isLoading: true})\r\n                    setTimeout(()=>{\r\n                        newsStreamCardQueue.push(uuidv1());\r\n                        newsStreamCardQueue.push(uuidv1());\r\n                        newsStreamCardQueue.push(uuidv1());\r\n                        newsStreamCardQueue.push(uuidv1());\r\n                        this.setState({newsStreamCardQueue, isLoading: false});\r\n                    },1000)\r\n\r\n                }\r\n            });\r\n        });\r\n\r\n        observer.observe(document.querySelector('.theBottom') as Element);\r\n    }\r\n\r\n    render(){ \r\n          let {newsStreamCardQueue, isLoading} = this.state;\r\n          return (\r\n            <Router>\r\n              <div className=\"App\">\r\n                  <Navbar/>\r\n                  <Grid className='mainDashboard'>\r\n                      <Grid.Column width={4} className='leftDashboard'>\r\n                          <ProfileCard />\r\n                          <TrendsCard />\r\n                          <FollowerRcmd />\r\n                          <FooterCard />\r\n                      </Grid.Column>\r\n\r\n                      <Grid.Column width={8} className='contentDashboard'>\r\n                          <Grid className='tweetStreamingArea'>\r\n                              <TweetBox />\r\n                              { \r\n                                newsStreamCardQueue.map((v,i)=>{\r\n                                    return <NewsStreamCard key={v}/>\r\n                                })\r\n                              }\r\n                              <GotoTop isLoading={isLoading} className=\"theBottom\" />\r\n                          </Grid>\r\n                      </Grid.Column>\r\n                      \r\n                      <Grid.Column width={4} className='rightDashboard'>\r\n                          <FollowerRcmd />\r\n                          <FooterCard />\r\n                      </Grid.Column>\r\n                  </Grid>\r\n              </div>\r\n            </Router>\r\n          );\r\n    }\r\n}\r\n\r\n//\r\n//\r\n\r\ntype DomainId<T extends string> = {\r\n    type: T,\r\n    value: number,\r\n}\r\n\r\n// CustomerId\r\ntype CustomerId = DomainId<'CustomerId'>;\r\nconst createCustomerId = (value: number): CustomerId => ({ type: 'CustomerId', value });\r\n\r\n// Product Id\r\ntype ProductId = DomainId<'ProductId'>;\r\nconst createProductId = (value: number): ProductId => ({ type: 'ProductId', value });\r\n\r\n// Example class\r\nclass Example {\r\n    static avoidAccidentalEquivalence(id: CustomerId) {\r\n        // Implementation\r\n    }\r\n\r\n    static useEquivalence(id: number) {\r\n        // Implementation\r\n    }\r\n}\r\n\r\nvar customerId = createCustomerId(1);\r\nvar productId = createProductId(5);\r\n\r\n// Allowed\r\nExample.avoidAccidentalEquivalence(customerId);\r\n\r\n// Errors 'Supplied parameters do not match signature of call target'\r\n//Example.avoidAccidentalEquivalence(productId);\r\n\r\n// Allowed\r\nExample.useEquivalence(customerId.value);\r\n\r\n// Allowed\r\nExample.useEquivalence(productId.value);\r\n\r\n\r\nlet firstNo = 12345567;\r\nconsole.log(firstNo);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}